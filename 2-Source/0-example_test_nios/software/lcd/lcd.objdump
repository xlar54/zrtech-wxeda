
lcd.elf:     file format elf32-littlenios2
lcd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000006d0 memsz 0x000006d0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000006b0  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  040006d0  040006d0  000016d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000026  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00001718  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000152  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b8  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b3  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0a  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d6  00000000  00000000  0000364f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000040  00000000  00000000  00003a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .thread_model 00000003  00000000  00000000  0000454e  2**0
                  CONTENTS, READONLY
 14 .cpu          00000003  00000000  00000000  00004551  2**0
                  CONTENTS, READONLY
 15 .simulation_enabled 00000001  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY
 16 .sysid_hash   00000004  00000000  00000000  00004555  2**0
                  CONTENTS, READONLY
 17 .sysid_base   00000004  00000000  00000000  00004559  2**0
                  CONTENTS, READONLY
 18 .sysid_time   00000004  00000000  00000000  0000455d  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000009  00000000  00000000  00004561  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000009  00000000  00000000  0000456a  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000009  00000000  00000000  00004573  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000001d  00000000  00000000  0000457c  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000001c  00000000  00000000  00004599  2**0
                  CONTENTS, READONLY
 24 .jdi          00005b01  00000000  00000000  000045b5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .text	00000000 .text
040006d0 l    d  .rodata	00000000 .rodata
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
04000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lcd1602.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04000584 l     F .text	0000007c udivmodsi4
04000058 g     F .text	0000009c alt_main
0400027c g     F .text	00000040 Lcd_IconAddr
040002bc g     F .text	0000003c Lcd_Icon
0400014c g     F .text	00000058 Lcd_WriteCommand
00000000 g     F .entry	00000000 __reset
040086f0 g       *ABS*	00000000 _gp
04000408 g     F .text	00000030 usleep
00000000 g       *ABS*	00000000 __alt_mem_epcs_controller
0400033c g     F .text	00000070 Lcd_Prints
040006c0 g     F .text	00000008 __udivsi3
040000f4 g     F .text	00000058 Lcd_CheckBusy
040001a4 g     F .text	00000058 Lcd_WriteData
040006f0 g       *ABS*	00000000 __bss_end
040006c8 g     F .text	00000008 __umodsi3
040006f0 g       *ABS*	00000000 end
040002f8 g     F .text	00000044 DisplayOneChar
06000000 g       *ABS*	00000000 __alt_stack_pointer
04000020 g     F .text	00000038 _start
04000438 g     F .text	0000014c alt_busy_sleep
040006f0 g       *ABS*	00000000 __alt_stack_base
040006f0 g       *ABS*	00000000 __bss_start
04000058  w    F .text	0000009c main
040001fc g     F .text	00000080 Lcd_LocateXY
04000600 g     F .text	00000060 __divsi3
040003ac g     F .text	0000005c Lcd_Init
040006f0 g       *ABS*	00000000 _edata
040006f0 g       *ABS*	00000000 _end
04000660 g     F .text	00000060 __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000000 g       *ABS*	00000000 __alt_mem_sdram
00002000 g       *ABS*	00000000 __alt_mem_onchip_ram



Disassembly of section .text:

04000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000020:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 4000024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 4000028:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400002c:	d6a1bc14 	ori	gp,gp,34544
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000030:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000034:	1081bc14 	ori	r2,r2,1776

    movhi r3, %hi(__bss_end)
 4000038:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400003c:	18c1bc14 	ori	r3,r3,1776

    beq r2, r3, 1f
 4000040:	10c00326 	beq	r2,r3,4000050 <_start+0x30>

0:
    stw zero, (r2)
 4000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400004c:	10fffd36 	bltu	r2,r3,4000044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000050:	40000580 	call	4000058 <alt_main>

04000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000054:	003fff06 	br	4000054 <alt_after_alt_main>

04000058 <alt_main>:
#include "lcd1602.h"

int main (void) __attribute__ ((weak, alias ("alt_main")));     //将程序的入口改为alt_main()，可以使
                                                                //很多驱动不会加载，可以大大减小代码长度
void alt_main()
{
 4000058:	defffd04 	addi	sp,sp,-12
 400005c:	dfc00215 	stw	ra,8(sp)
 4000060:	df000115 	stw	fp,4(sp)
 4000064:	df000104 	addi	fp,sp,4
    alt_u8 i;

    Lcd_Init();
 4000068:	40003ac0 	call	40003ac <Lcd_Init>

	//清除特殊符号的显示*****************
	Lcd_WriteCommand(0x2c); //re=1,2c
 400006c:	01000b04 	movi	r4,44
 4000070:	400014c0 	call	400014c <Lcd_WriteCommand>
	for(i=0; i<16; i++)
 4000074:	e03fff05 	stb	zero,-4(fp)
 4000078:	00000806 	br	400009c <alt_main+0x44>
	{
		Lcd_Icon(i,0x00);
 400007c:	e13fff03 	ldbu	r4,-4(fp)
 4000080:	000b883a 	mov	r5,zero
 4000084:	40002bc0 	call	40002bc <Lcd_Icon>
		usleep(1);
 4000088:	01000044 	movi	r4,1
 400008c:	40004080 	call	4000408 <usleep>

    Lcd_Init();

	//清除特殊符号的显示*****************
	Lcd_WriteCommand(0x2c); //re=1,2c
	for(i=0; i<16; i++)
 4000090:	e0bfff03 	ldbu	r2,-4(fp)
 4000094:	10800044 	addi	r2,r2,1
 4000098:	e0bfff05 	stb	r2,-4(fp)
 400009c:	e0bfff03 	ldbu	r2,-4(fp)
 40000a0:	10800430 	cmpltui	r2,r2,16
 40000a4:	103ff51e 	bne	r2,zero,400007c <alt_main+0x24>
		Lcd_Icon(i,0x00);
		usleep(1);
	}

	//显示特殊符号****************************
	Lcd_Icon(13, 0xff);		//13,是信封图标，可以查给的图片，0xff中，低5位控制图标，
 40000a8:	01000344 	movi	r4,13
 40000ac:	01403fc4 	movi	r5,255
 40000b0:	40002bc0 	call	40002bc <Lcd_Icon>
	Lcd_Icon(0, 0xff);		//信封图标只有一个，天线图标5位控制天线+4格信号
 40000b4:	0009883a 	mov	r4,zero
 40000b8:	01403fc4 	movi	r5,255
 40000bc:	40002bc0 	call	40002bc <Lcd_Icon>
	//******************************************
	Lcd_WriteCommand(0x2a);	//显示正常字符，re=0,2a
 40000c0:	01000a84 	movi	r4,42
 40000c4:	400014c0 	call	400014c <Lcd_WriteCommand>

	//以下是字符串显示
	Lcd_Prints(0, 0, "Hello World!");
 40000c8:	01810034 	movhi	r6,1024
 40000cc:	3181b404 	addi	r6,r6,1744
 40000d0:	0009883a 	mov	r4,zero
 40000d4:	000b883a 	mov	r5,zero
 40000d8:	400033c0 	call	400033c <Lcd_Prints>
	Lcd_Prints(0, 1, "Espire_I V2.00");
 40000dc:	01810034 	movhi	r6,1024
 40000e0:	3181b804 	addi	r6,r6,1760
 40000e4:	0009883a 	mov	r4,zero
 40000e8:	01400044 	movi	r5,1
 40000ec:	400033c0 	call	400033c <Lcd_Prints>

	while(1);
 40000f0:	003fff06 	br	40000f0 <alt_main+0x98>

040000f4 <Lcd_CheckBusy>:
#include "lcd1602.h"

void Lcd_CheckBusy()		//读液晶的忙标志位并检测
{
 40000f4:	defffd04 	addi	sp,sp,-12
 40000f8:	dfc00215 	stw	ra,8(sp)
 40000fc:	df000115 	stw	fp,4(sp)
 4000100:	df000104 	addi	fp,sp,4
    alt_u8 status=0xff;
 4000104:	00bfffc4 	movi	r2,-1
 4000108:	e0bfff05 	stb	r2,-4(fp)
    do
    {
        status=IORD_ALTERA_AVALON_LCD_16207_STATUS(LCD_BASE);
 400010c:	008e5904 	movi	r2,14692
 4000110:	10800037 	ldwio	r2,0(r2)
 4000114:	e0bfff05 	stb	r2,-4(fp)
        usleep(1);
 4000118:	01000044 	movi	r4,1
 400011c:	40004080 	call	4000408 <usleep>
    }while(status&0x80);
 4000120:	e0bfff03 	ldbu	r2,-4(fp)
 4000124:	10803fcc 	andi	r2,r2,255
 4000128:	1080201c 	xori	r2,r2,128
 400012c:	10bfe004 	addi	r2,r2,-128
 4000130:	1004803a 	cmplt	r2,r2,zero
 4000134:	103ff51e 	bne	r2,zero,400010c <Lcd_CheckBusy+0x18>
}
 4000138:	e037883a 	mov	sp,fp
 400013c:	dfc00117 	ldw	ra,4(sp)
 4000140:	df000017 	ldw	fp,0(sp)
 4000144:	dec00204 	addi	sp,sp,8
 4000148:	f800283a 	ret

0400014c <Lcd_WriteCommand>:

void Lcd_WriteCommand(alt_u8 com)
{
 400014c:	defffd04 	addi	sp,sp,-12
 4000150:	dfc00215 	stw	ra,8(sp)
 4000154:	df000115 	stw	fp,4(sp)
 4000158:	df000104 	addi	fp,sp,4
 400015c:	e13fff05 	stb	r4,-4(fp)
	Lcd_CheckBusy();
 4000160:	40000f40 	call	40000f4 <Lcd_CheckBusy>
    IOWR_ALTERA_AVALON_LCD_16207_COMMAND(LCD_BASE, com);
 4000164:	e0ffff03 	ldbu	r3,-4(fp)
 4000168:	008e5804 	movi	r2,14688
 400016c:	10c00035 	stwio	r3,0(r2)
    usleep(1);
 4000170:	01000044 	movi	r4,1
 4000174:	40004080 	call	4000408 <usleep>
    IOWR_ALTERA_AVALON_LCD_16207_COMMAND(LCD_BASE, com<<4);
 4000178:	e0bfff03 	ldbu	r2,-4(fp)
 400017c:	1006913a 	slli	r3,r2,4
 4000180:	008e5804 	movi	r2,14688
 4000184:	10c00035 	stwio	r3,0(r2)
    usleep(1);
 4000188:	01000044 	movi	r4,1
 400018c:	40004080 	call	4000408 <usleep>
}
 4000190:	e037883a 	mov	sp,fp
 4000194:	dfc00117 	ldw	ra,4(sp)
 4000198:	df000017 	ldw	fp,0(sp)
 400019c:	dec00204 	addi	sp,sp,8
 40001a0:	f800283a 	ret

040001a4 <Lcd_WriteData>:

void Lcd_WriteData(alt_u8 data)
{
 40001a4:	defffd04 	addi	sp,sp,-12
 40001a8:	dfc00215 	stw	ra,8(sp)
 40001ac:	df000115 	stw	fp,4(sp)
 40001b0:	df000104 	addi	fp,sp,4
 40001b4:	e13fff05 	stb	r4,-4(fp)
	Lcd_CheckBusy();
 40001b8:	40000f40 	call	40000f4 <Lcd_CheckBusy>
	IOWR_ALTERA_AVALON_LCD_16207_DATA(LCD_BASE, data);
 40001bc:	e0ffff03 	ldbu	r3,-4(fp)
 40001c0:	008e5a04 	movi	r2,14696
 40001c4:	10c00035 	stwio	r3,0(r2)
    usleep(1);
 40001c8:	01000044 	movi	r4,1
 40001cc:	40004080 	call	4000408 <usleep>
    IOWR_ALTERA_AVALON_LCD_16207_DATA(LCD_BASE, data<<4);
 40001d0:	e0bfff03 	ldbu	r2,-4(fp)
 40001d4:	1006913a 	slli	r3,r2,4
 40001d8:	008e5a04 	movi	r2,14696
 40001dc:	10c00035 	stwio	r3,0(r2)
    usleep(1);
 40001e0:	01000044 	movi	r4,1
 40001e4:	40004080 	call	4000408 <usleep>
}
 40001e8:	e037883a 	mov	sp,fp
 40001ec:	dfc00117 	ldw	ra,4(sp)
 40001f0:	df000017 	ldw	fp,0(sp)
 40001f4:	dec00204 	addi	sp,sp,8
 40001f8:	f800283a 	ret

040001fc <Lcd_LocateXY>:

//设置字符显示区域的显示位置 re必须为0
void Lcd_LocateXY(alt_u8 x, alt_u8 y)
{
 40001fc:	defffb04 	addi	sp,sp,-20
 4000200:	dfc00415 	stw	ra,16(sp)
 4000204:	df000315 	stw	fp,12(sp)
 4000208:	df000304 	addi	fp,sp,12
 400020c:	e13ffe05 	stb	r4,-8(fp)
 4000210:	e17fff05 	stb	r5,-4(fp)
	alt_u8 temp = 0;
 4000214:	e03ffd05 	stb	zero,-12(fp)

	if(y == 0) temp = 0x80 + x;
 4000218:	e0bfff03 	ldbu	r2,-4(fp)
 400021c:	1004c03a 	cmpne	r2,r2,zero
 4000220:	1000031e 	bne	r2,zero,4000230 <Lcd_LocateXY+0x34>
 4000224:	e0bffe03 	ldbu	r2,-8(fp)
 4000228:	10bfe004 	addi	r2,r2,-128
 400022c:	e0bffd05 	stb	r2,-12(fp)
	if(y == 1) temp = 0x90 + x;
 4000230:	e0bfff03 	ldbu	r2,-4(fp)
 4000234:	10800058 	cmpnei	r2,r2,1
 4000238:	1000031e 	bne	r2,zero,4000248 <Lcd_LocateXY+0x4c>
 400023c:	e0bffe03 	ldbu	r2,-8(fp)
 4000240:	10bfe404 	addi	r2,r2,-112
 4000244:	e0bffd05 	stb	r2,-12(fp)
	if(y == 2) temp = 0xc0 + x;
 4000248:	e0bfff03 	ldbu	r2,-4(fp)
 400024c:	10800098 	cmpnei	r2,r2,2
 4000250:	1000031e 	bne	r2,zero,4000260 <Lcd_LocateXY+0x64>
 4000254:	e0bffe03 	ldbu	r2,-8(fp)
 4000258:	10bff004 	addi	r2,r2,-64
 400025c:	e0bffd05 	stb	r2,-12(fp)

	Lcd_WriteCommand(temp);
 4000260:	e13ffd03 	ldbu	r4,-12(fp)
 4000264:	400014c0 	call	400014c <Lcd_WriteCommand>
}
 4000268:	e037883a 	mov	sp,fp
 400026c:	dfc00117 	ldw	ra,4(sp)
 4000270:	df000017 	ldw	fp,0(sp)
 4000274:	dec00204 	addi	sp,sp,8
 4000278:	f800283a 	ret

0400027c <Lcd_IconAddr>:

void Lcd_IconAddr(alt_u8 x)
{
 400027c:	defffc04 	addi	sp,sp,-16
 4000280:	dfc00315 	stw	ra,12(sp)
 4000284:	df000215 	stw	fp,8(sp)
 4000288:	df000204 	addi	fp,sp,8
 400028c:	e13fff05 	stb	r4,-4(fp)
	alt_u8 temp = 0;
 4000290:	e03ffe05 	stb	zero,-8(fp)
	temp = 0x40 + x;
 4000294:	e0bfff03 	ldbu	r2,-4(fp)
 4000298:	10801004 	addi	r2,r2,64
 400029c:	e0bffe05 	stb	r2,-8(fp)
	Lcd_WriteCommand(temp);
 40002a0:	e13ffe03 	ldbu	r4,-8(fp)
 40002a4:	400014c0 	call	400014c <Lcd_WriteCommand>
}
 40002a8:	e037883a 	mov	sp,fp
 40002ac:	dfc00117 	ldw	ra,4(sp)
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00204 	addi	sp,sp,8
 40002b8:	f800283a 	ret

040002bc <Lcd_Icon>:

//设置特殊图标显示区域的显示位置 re必须为1
void Lcd_Icon(alt_u8 addr, alt_u8 mark)
{
 40002bc:	defffc04 	addi	sp,sp,-16
 40002c0:	dfc00315 	stw	ra,12(sp)
 40002c4:	df000215 	stw	fp,8(sp)
 40002c8:	df000204 	addi	fp,sp,8
 40002cc:	e13ffe05 	stb	r4,-8(fp)
 40002d0:	e17fff05 	stb	r5,-4(fp)
	Lcd_IconAddr(addr);
 40002d4:	e13ffe03 	ldbu	r4,-8(fp)
 40002d8:	400027c0 	call	400027c <Lcd_IconAddr>
	Lcd_WriteData(mark);
 40002dc:	e13fff03 	ldbu	r4,-4(fp)
 40002e0:	40001a40 	call	40001a4 <Lcd_WriteData>
}
 40002e4:	e037883a 	mov	sp,fp
 40002e8:	dfc00117 	ldw	ra,4(sp)
 40002ec:	df000017 	ldw	fp,0(sp)
 40002f0:	dec00204 	addi	sp,sp,8
 40002f4:	f800283a 	ret

040002f8 <DisplayOneChar>:

void DisplayOneChar(alt_u8 x, alt_u8 y, alt_u8 data)
{
 40002f8:	defffb04 	addi	sp,sp,-20
 40002fc:	dfc00415 	stw	ra,16(sp)
 4000300:	df000315 	stw	fp,12(sp)
 4000304:	df000304 	addi	fp,sp,12
 4000308:	e13ffd05 	stb	r4,-12(fp)
 400030c:	e17ffe05 	stb	r5,-8(fp)
 4000310:	e1bfff05 	stb	r6,-4(fp)
	Lcd_LocateXY(x, y);
 4000314:	e13ffd03 	ldbu	r4,-12(fp)
 4000318:	e17ffe03 	ldbu	r5,-8(fp)
 400031c:	40001fc0 	call	40001fc <Lcd_LocateXY>
	Lcd_WriteData(data);
 4000320:	e13fff03 	ldbu	r4,-4(fp)
 4000324:	40001a40 	call	40001a4 <Lcd_WriteData>
}
 4000328:	e037883a 	mov	sp,fp
 400032c:	dfc00117 	ldw	ra,4(sp)
 4000330:	df000017 	ldw	fp,0(sp)
 4000334:	dec00204 	addi	sp,sp,8
 4000338:	f800283a 	ret

0400033c <Lcd_Prints>:

void Lcd_Prints(alt_u8 x, alt_u8 y, alt_u8 *string)		//打印字符串
{
 400033c:	defffb04 	addi	sp,sp,-20
 4000340:	dfc00415 	stw	ra,16(sp)
 4000344:	df000315 	stw	fp,12(sp)
 4000348:	df000304 	addi	fp,sp,12
 400034c:	e1bfff15 	stw	r6,-4(fp)
 4000350:	e13ffd05 	stb	r4,-12(fp)
 4000354:	e17ffe05 	stb	r5,-8(fp)
	Lcd_LocateXY(x, y);
 4000358:	e13ffd03 	ldbu	r4,-12(fp)
 400035c:	e17ffe03 	ldbu	r5,-8(fp)
 4000360:	40001fc0 	call	40001fc <Lcd_LocateXY>

	while(*string)
 4000364:	00000706 	br	4000384 <Lcd_Prints+0x48>
	{
		Lcd_WriteData(*string);
 4000368:	e0bfff17 	ldw	r2,-4(fp)
 400036c:	10800003 	ldbu	r2,0(r2)
 4000370:	11003fcc 	andi	r4,r2,255
 4000374:	40001a40 	call	40001a4 <Lcd_WriteData>
		string++;
 4000378:	e0bfff17 	ldw	r2,-4(fp)
 400037c:	10800044 	addi	r2,r2,1
 4000380:	e0bfff15 	stw	r2,-4(fp)

void Lcd_Prints(alt_u8 x, alt_u8 y, alt_u8 *string)		//打印字符串
{
	Lcd_LocateXY(x, y);

	while(*string)
 4000384:	e0bfff17 	ldw	r2,-4(fp)
 4000388:	10800003 	ldbu	r2,0(r2)
 400038c:	10803fcc 	andi	r2,r2,255
 4000390:	1004c03a 	cmpne	r2,r2,zero
 4000394:	103ff41e 	bne	r2,zero,4000368 <Lcd_Prints+0x2c>
	{
		Lcd_WriteData(*string);
		string++;
	}
}
 4000398:	e037883a 	mov	sp,fp
 400039c:	dfc00117 	ldw	ra,4(sp)
 40003a0:	df000017 	ldw	fp,0(sp)
 40003a4:	dec00204 	addi	sp,sp,8
 40003a8:	f800283a 	ret

040003ac <Lcd_Init>:

void Lcd_Init()			//液晶1602初始化
{
 40003ac:	defffe04 	addi	sp,sp,-8
 40003b0:	dfc00115 	stw	ra,4(sp)
 40003b4:	df000015 	stw	fp,0(sp)
 40003b8:	d839883a 	mov	fp,sp
	Lcd_WriteCommand(0x22);
 40003bc:	01000884 	movi	r4,34
 40003c0:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x2c); //re=1,2c
 40003c4:	01000b04 	movi	r4,44
 40003c8:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x07);
 40003cc:	010001c4 	movi	r4,7
 40003d0:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x08);
 40003d4:	01000204 	movi	r4,8
 40003d8:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x28); //re=0,28
 40003dc:	01000a04 	movi	r4,40
 40003e0:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x0c);
 40003e4:	01000304 	movi	r4,12
 40003e8:	400014c0 	call	400014c <Lcd_WriteCommand>
	Lcd_WriteCommand(0x07);
 40003ec:	010001c4 	movi	r4,7
 40003f0:	400014c0 	call	400014c <Lcd_WriteCommand>
}
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	dfc00117 	ldw	ra,4(sp)
 40003fc:	df000017 	ldw	fp,0(sp)
 4000400:	dec00204 	addi	sp,sp,8
 4000404:	f800283a 	ret

04000408 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4000408:	defffd04 	addi	sp,sp,-12
 400040c:	dfc00215 	stw	ra,8(sp)
 4000410:	df000115 	stw	fp,4(sp)
 4000414:	df000104 	addi	fp,sp,4
 4000418:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400041c:	e13fff17 	ldw	r4,-4(fp)
 4000420:	40004380 	call	4000438 <alt_busy_sleep>
}
 4000424:	e037883a 	mov	sp,fp
 4000428:	dfc00117 	ldw	ra,4(sp)
 400042c:	df000017 	ldw	fp,0(sp)
 4000430:	dec00204 	addi	sp,sp,8
 4000434:	f800283a 	ret

04000438 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000438:	defffa04 	addi	sp,sp,-24
 400043c:	dfc00515 	stw	ra,20(sp)
 4000440:	df000415 	stw	fp,16(sp)
 4000444:	df000404 	addi	fp,sp,16
 4000448:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400044c:	008000c4 	movi	r2,3
 4000450:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 4000454:	e0fffc17 	ldw	r3,-16(fp)
 4000458:	008003f4 	movhi	r2,15
 400045c:	10909004 	addi	r2,r2,16960
 4000460:	188b383a 	mul	r5,r3,r2
 4000464:	0100b734 	movhi	r4,732
 4000468:	211b0004 	addi	r4,r4,27648
 400046c:	40006c00 	call	40006c0 <__udivsi3>
 4000470:	100b883a 	mov	r5,r2
 4000474:	01200034 	movhi	r4,32768
 4000478:	213fffc4 	addi	r4,r4,-1
 400047c:	40006c00 	call	40006c0 <__udivsi3>
 4000480:	100b883a 	mov	r5,r2
 4000484:	e13fff17 	ldw	r4,-4(fp)
 4000488:	40006c00 	call	40006c0 <__udivsi3>
 400048c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4000490:	e0bffd17 	ldw	r2,-12(fp)
 4000494:	1005003a 	cmpeq	r2,r2,zero
 4000498:	1000281e 	bne	r2,zero,400053c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 400049c:	e03ffe15 	stw	zero,-8(fp)
 40004a0:	00001606 	br	40004fc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40004a4:	00a00034 	movhi	r2,32768
 40004a8:	10bfffc4 	addi	r2,r2,-1
 40004ac:	10bfffc4 	addi	r2,r2,-1
 40004b0:	103ffe1e 	bne	r2,zero,40004ac <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40004b4:	e0fffc17 	ldw	r3,-16(fp)
 40004b8:	008003f4 	movhi	r2,15
 40004bc:	10909004 	addi	r2,r2,16960
 40004c0:	188b383a 	mul	r5,r3,r2
 40004c4:	0100b734 	movhi	r4,732
 40004c8:	211b0004 	addi	r4,r4,27648
 40004cc:	40006c00 	call	40006c0 <__udivsi3>
 40004d0:	100b883a 	mov	r5,r2
 40004d4:	01200034 	movhi	r4,32768
 40004d8:	213fffc4 	addi	r4,r4,-1
 40004dc:	40006c00 	call	40006c0 <__udivsi3>
 40004e0:	1007883a 	mov	r3,r2
 40004e4:	e0bfff17 	ldw	r2,-4(fp)
 40004e8:	10c5c83a 	sub	r2,r2,r3
 40004ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40004f0:	e0bffe17 	ldw	r2,-8(fp)
 40004f4:	10800044 	addi	r2,r2,1
 40004f8:	e0bffe15 	stw	r2,-8(fp)
 40004fc:	e0fffe17 	ldw	r3,-8(fp)
 4000500:	e0bffd17 	ldw	r2,-12(fp)
 4000504:	18bfe716 	blt	r3,r2,40004a4 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4000508:	e0fffc17 	ldw	r3,-16(fp)
 400050c:	008003f4 	movhi	r2,15
 4000510:	10909004 	addi	r2,r2,16960
 4000514:	188b383a 	mul	r5,r3,r2
 4000518:	0100b734 	movhi	r4,732
 400051c:	211b0004 	addi	r4,r4,27648
 4000520:	40006c00 	call	40006c0 <__udivsi3>
 4000524:	1007883a 	mov	r3,r2
 4000528:	e0bfff17 	ldw	r2,-4(fp)
 400052c:	1885383a 	mul	r2,r3,r2
 4000530:	10bfffc4 	addi	r2,r2,-1
 4000534:	103ffe1e 	bne	r2,zero,4000530 <alt_busy_sleep+0xf8>
 4000538:	00000c06 	br	400056c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400053c:	e0fffc17 	ldw	r3,-16(fp)
 4000540:	008003f4 	movhi	r2,15
 4000544:	10909004 	addi	r2,r2,16960
 4000548:	188b383a 	mul	r5,r3,r2
 400054c:	0100b734 	movhi	r4,732
 4000550:	211b0004 	addi	r4,r4,27648
 4000554:	40006c00 	call	40006c0 <__udivsi3>
 4000558:	1007883a 	mov	r3,r2
 400055c:	e0bfff17 	ldw	r2,-4(fp)
 4000560:	1885383a 	mul	r2,r3,r2
 4000564:	10bfffc4 	addi	r2,r2,-1
 4000568:	00bffe16 	blt	zero,r2,4000564 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400056c:	0005883a 	mov	r2,zero
}
 4000570:	e037883a 	mov	sp,fp
 4000574:	dfc00117 	ldw	ra,4(sp)
 4000578:	df000017 	ldw	fp,0(sp)
 400057c:	dec00204 	addi	sp,sp,8
 4000580:	f800283a 	ret

04000584 <udivmodsi4>:
 4000584:	29001b2e 	bgeu	r5,r4,40005f4 <udivmodsi4+0x70>
 4000588:	28001a16 	blt	r5,zero,40005f4 <udivmodsi4+0x70>
 400058c:	00800044 	movi	r2,1
 4000590:	0007883a 	mov	r3,zero
 4000594:	01c007c4 	movi	r7,31
 4000598:	00000306 	br	40005a8 <udivmodsi4+0x24>
 400059c:	19c01326 	beq	r3,r7,40005ec <udivmodsi4+0x68>
 40005a0:	18c00044 	addi	r3,r3,1
 40005a4:	28000416 	blt	r5,zero,40005b8 <udivmodsi4+0x34>
 40005a8:	294b883a 	add	r5,r5,r5
 40005ac:	1085883a 	add	r2,r2,r2
 40005b0:	293ffa36 	bltu	r5,r4,400059c <udivmodsi4+0x18>
 40005b4:	10000d26 	beq	r2,zero,40005ec <udivmodsi4+0x68>
 40005b8:	0007883a 	mov	r3,zero
 40005bc:	21400236 	bltu	r4,r5,40005c8 <udivmodsi4+0x44>
 40005c0:	2149c83a 	sub	r4,r4,r5
 40005c4:	1886b03a 	or	r3,r3,r2
 40005c8:	1004d07a 	srli	r2,r2,1
 40005cc:	280ad07a 	srli	r5,r5,1
 40005d0:	103ffa1e 	bne	r2,zero,40005bc <udivmodsi4+0x38>
 40005d4:	30000226 	beq	r6,zero,40005e0 <udivmodsi4+0x5c>
 40005d8:	2005883a 	mov	r2,r4
 40005dc:	f800283a 	ret
 40005e0:	1809883a 	mov	r4,r3
 40005e4:	2005883a 	mov	r2,r4
 40005e8:	f800283a 	ret
 40005ec:	0007883a 	mov	r3,zero
 40005f0:	003ff806 	br	40005d4 <udivmodsi4+0x50>
 40005f4:	00800044 	movi	r2,1
 40005f8:	0007883a 	mov	r3,zero
 40005fc:	003fef06 	br	40005bc <udivmodsi4+0x38>

04000600 <__divsi3>:
 4000600:	defffe04 	addi	sp,sp,-8
 4000604:	dc000015 	stw	r16,0(sp)
 4000608:	dfc00115 	stw	ra,4(sp)
 400060c:	0021883a 	mov	r16,zero
 4000610:	20000c16 	blt	r4,zero,4000644 <__divsi3+0x44>
 4000614:	000d883a 	mov	r6,zero
 4000618:	28000e16 	blt	r5,zero,4000654 <__divsi3+0x54>
 400061c:	40005840 	call	4000584 <udivmodsi4>
 4000620:	1007883a 	mov	r3,r2
 4000624:	8005003a 	cmpeq	r2,r16,zero
 4000628:	1000011e 	bne	r2,zero,4000630 <__divsi3+0x30>
 400062c:	00c7c83a 	sub	r3,zero,r3
 4000630:	1805883a 	mov	r2,r3
 4000634:	dfc00117 	ldw	ra,4(sp)
 4000638:	dc000017 	ldw	r16,0(sp)
 400063c:	dec00204 	addi	sp,sp,8
 4000640:	f800283a 	ret
 4000644:	0109c83a 	sub	r4,zero,r4
 4000648:	04000044 	movi	r16,1
 400064c:	000d883a 	mov	r6,zero
 4000650:	283ff20e 	bge	r5,zero,400061c <__divsi3+0x1c>
 4000654:	014bc83a 	sub	r5,zero,r5
 4000658:	8021003a 	cmpeq	r16,r16,zero
 400065c:	003fef06 	br	400061c <__divsi3+0x1c>

04000660 <__modsi3>:
 4000660:	deffff04 	addi	sp,sp,-4
 4000664:	dfc00015 	stw	ra,0(sp)
 4000668:	01800044 	movi	r6,1
 400066c:	2807883a 	mov	r3,r5
 4000670:	20000416 	blt	r4,zero,4000684 <__modsi3+0x24>
 4000674:	28000c16 	blt	r5,zero,40006a8 <__modsi3+0x48>
 4000678:	dfc00017 	ldw	ra,0(sp)
 400067c:	dec00104 	addi	sp,sp,4
 4000680:	40005841 	jmpi	4000584 <udivmodsi4>
 4000684:	0109c83a 	sub	r4,zero,r4
 4000688:	28000b16 	blt	r5,zero,40006b8 <__modsi3+0x58>
 400068c:	180b883a 	mov	r5,r3
 4000690:	01800044 	movi	r6,1
 4000694:	40005840 	call	4000584 <udivmodsi4>
 4000698:	0085c83a 	sub	r2,zero,r2
 400069c:	dfc00017 	ldw	ra,0(sp)
 40006a0:	dec00104 	addi	sp,sp,4
 40006a4:	f800283a 	ret
 40006a8:	014bc83a 	sub	r5,zero,r5
 40006ac:	dfc00017 	ldw	ra,0(sp)
 40006b0:	dec00104 	addi	sp,sp,4
 40006b4:	40005841 	jmpi	4000584 <udivmodsi4>
 40006b8:	0147c83a 	sub	r3,zero,r5
 40006bc:	003ff306 	br	400068c <__modsi3+0x2c>

040006c0 <__udivsi3>:
 40006c0:	000d883a 	mov	r6,zero
 40006c4:	40005841 	jmpi	4000584 <udivmodsi4>

040006c8 <__umodsi3>:
 40006c8:	01800044 	movi	r6,1
 40006cc:	40005841 	jmpi	4000584 <udivmodsi4>
